pops <- list()
for (data in pop.data.ddi.plasma) {
if (data$groups[[2]] == id)
pops <- append(pops, list(data))
}
if (length(pops) >= 2) {
for (i in 2:length(pops)) {
pops[[1]]$profiles <- append(pops[[1]]$profiles, pops[[i]]$profiles)
pops[[1]]$obs.ids <- append(pops[[1]]$obs.ids, pops[[i]]$obs.ids)
}
}
pops[[1]]$groups[1] <- "DDI_Plasma"
ddi.profiles <- append(ddi.profiles, list(pops[[1]]))
}
md <- plot_pops(ddi.profiles, obs.data, md, file.path(work.dir, plot.dir), "ddi_plasma_")
##################################################################
# DDI Urin
##################################################################
# Plasma urin
master.data.ddi.urin <- read.master.file(master.file, molecules = molecules, xls.sheet = 5)
# Read population data
pop.data.ddi.urin <- read.pop.profiles.from.master(master.data.ddi.urin,
molecules = molecules,
files.dir = file.path(work.dir, ddi.dir),
pop.file.ext = ".csv")
ddi_ids <- unique(master.data.ddi.urin$data$group2)
ddi.profiles <- list()
for (id in ddi_ids) {
pops <- list()
for (data in pop.data.ddi.urin) {
if (data$groups[[2]] == id)
pops <- append(pops, list(data))
}
if (length(pops) >= 2) {
for (i in 2:length(pops)) {
pops[[1]]$profiles <- append(pops[[1]]$profiles, pops[[i]]$profiles)
pops[[1]]$obs.ids <- append(pops[[1]]$obs.ids, pops[[i]]$obs.ids)
}
}
pops[[1]]$groups[1] <- "DDI_Urin"
ddi.profiles <- append(ddi.profiles, list(pops[[1]]))
}
md <- plot_pops(ddi.profiles, obs.data, md, file.path(work.dir, plot.dir), "ddi_urin_")
##################################################################
# DGI Plasma
##################################################################
# Plasma master
master.data.dgi.plasma <- read.master.file(master.file, molecules = molecules, xls.sheet = 6)
# Read population data
pop.data.dgi.plasma <- read.pop.profiles.from.master(master.data.dgi.plasma,
molecules = molecules,
files.dir = file.path(work.dir, dgi.dir),
pop.file.ext = ".csv")
ddi_ids <- unique(master.data.dgi.plasma$data$group2)
ddi.profiles <- list()
for (id in ddi_ids) {
pops <- list()
for (data in pop.data.dgi.plasma) {
if (data$groups[[2]] == id)
pops <- append(pops, list(data))
}
if (length(pops) >= 2) {
for (i in 2:length(pops)) {
pops[[1]]$profiles <- append(pops[[1]]$profiles, pops[[i]]$profiles)
pops[[1]]$obs.ids <- append(pops[[1]]$obs.ids, pops[[i]]$obs.ids)
}
}
pops[[1]]$groups[1] <- "DGI_Plasma"
ddi.profiles <- append(ddi.profiles, list(pops[[1]]))
}
md <- plot_pops(ddi.profiles, obs.data, md, file.path(work.dir, plot.dir), "dgi_plasma_")
##################################################################
# DDI Urin
##################################################################
# Plasma urin
master.data.dgi.urin <- read.master.file(master.file, molecules = molecules, xls.sheet = 7)
# Read population data
pop.data.dgi.urin <- read.pop.profiles.from.master(master.data.dgi.urin,
molecules = molecules,
files.dir = file.path(work.dir, dgi.dir),
pop.file.ext = ".csv")
ddi_ids <- unique(master.data.dgi.urin$data$group2)
ddi.profiles <- list()
for (id in ddi_ids) {
pops <- list()
for (data in pop.data.dgi.urin) {
if (data$groups[[2]] == id)
pops <- append(pops, list(data))
}
if (length(pops) >= 2) {
for (i in 2:length(pops)) {
pops[[1]]$profiles <- append(pops[[1]]$profiles, pops[[i]]$profiles)
pops[[1]]$obs.ids <- append(pops[[1]]$obs.ids, pops[[i]]$obs.ids)
}
}
pops[[1]]$groups[1] <- "DGI_Urin"
ddi.profiles <- append(ddi.profiles, list(pops[[1]]))
}
md <- plot_pops(ddi.profiles, obs.data, md, file.path(work.dir, plot.dir), "dgi_urin_")
##################################################################
# SERIALIZE TO JSON
##################################################################
options("encoding" = "UTF-8")
json_file <- file.path(work.dir, plot.dir, "pksh_eval.json")
out = file(json_file, 'w')
write(jsonlite::serializeJSON(md, pretty = TRUE), out)
close(out)
# Starts here !!!
library(pksimhelper)
library(units)
library(xlsx)
###################################################################
# Helper functions
plot_fn <- function(x) pdf(x)
plot.ext <- function() ".pdf"
#plot_fn <- function(x) png(x, width = 480 * 4, height = 480 * 4, res = 72 * 4)
#plot.ext <- function() ".png"
#plot_fn <- function(x) svg(x)
#plot.ext <- function() ".svg"
sanatize_file <- function(file) {
file <- gsub(" +", "", file)
iconv(file, "latin1", "ASCII", sub = "u")
}
md_assist <- function(model.name, groups = NULL) {
df <- tibble::tibble(id = character(),
file = character(),
type = character())
if (length(groups) > 0) {
g_list = rep(list(character()), length(groups))
names(g_list) <- groups
g_list <- c(.data = list(df), g_list)
df <- do.call(tibble::add_column, g_list)
}
list(model.name = model.name,
groups = groups,
pop.files = df,
molecules = list())
}
md_add_pop_file <- function(md.obj,
id,
file,
type = c("linear", "log", "add_1", "add_2"),
groups = NULL) {
type <- match.arg(type)
a_list <- list(.data = md.obj$pop.files,
id = id,
file = file,
type = type)
if (length(groups) > 0) {
groups <- as.list(groups)
names(groups) <- md.obj$groups[1:length(groups)]
a_list <- append(a_list, groups)
}
md.obj$pop.files <- do.call(tibble::add_row, a_list)
return(md.obj)
}
md_add_molecules <- function(md.obj,
molecules) {
md.obj$molecules = molecules
return(md.obj)
}
plot_pops <- function(pop.data, obs.data, md, plot.dir, prefix) {
# PLOT OPTIONS
main.plot.args = list(bty = 'l', las = 0, cex.main = 1.7,
cex.axis = 1.8,
cex.lab = 1.8, cex = 1.5)
legend.plot.args = list(x = "topright", cex = 1.25, lwd = 3, bty = "n",
y.intersp = 1.2)
avg.fn = geo.mean
min.var.fn = geo.dev.min
max.var.fn = geo.dev.max
#############################
options(scipen = 5)
i <- 0
for (data in pop.data) {
i <- i+1
message(paste("Processing <", data$id, ">"))
if (grepl("fraction to cotinine", data$id)) {
message("Skipping Fraction to Cotinine")
next
}
plot_log <- TRUE
# units
time.unit <- if (grepl("PET", data$id)) as_units("min") else as_units("h")
value.unit <- as_units("ng/ml")
if (data$profiles[[1]]$molecule$is.fraction) {
plot_log <- FALSE
value.unit <- as_units("%")
} else {
if (grepl("PET", data$id)) {
value.unit <- as_units("pg/ml")
}
}
file_name <- paste0(prefix,i,sanatize_file(data$id), "_LIN", plot.ext())
plot_fn(file.path(plot.dir, file_name))
md <- md_add_pop_file(md, data$id, file = file_name, type = "linear", groups = data$groups)
par(mar = par()$mar + c(0, 2, 0, 0), mgp = par()$mgp + c(0.2, -0.2, 0))
plot.matched(data, obs.data, ymax.rel.add = 0.0,
poly.alpha = 0.2, cex = 1.6, time.unit = time.unit, sim.lwd = 3, error.lwd = 2.5,
avg.fn = avg.fn, min.var.fn = q16, max.var.fn = q84,
legend.plot.args = legend.plot.args,
main.plot.args = main.plot.args,
show.main = T, value.unit = value.unit)
dev.off()
if (plot_log) {
file_name <- paste0(prefix,i,sanatize_file(data$id), "_LOG", plot.ext())
plot_fn(file.path(plot.dir, file_name))
md <- md_add_pop_file(md, data$id, file = file_name, type = "log", groups = data$groups)
par(mar = par()$mar + c(0, 2, 0, 0), mgp = par()$mgp + c(0.2, -0.2, 0))
plot.matched(data, obs.data, ymax.rel.add = 0.0,
poly.alpha = 0.2, cex = 1.6, time.unit = time.unit, sim.lwd = 3, error.lwd = 2.5,
avg.fn = avg.fn, min.var.fn = q16, max.var.fn = q84,
main.plot.args = append(main.plot.args,  list(log = "y")),
legend.plot.args = legend.plot.args,
rm.zero.neg.rows = F,
show.main = T, value.unit = value.unit)
dev.off()
}
}
return(md)
}
##################################################################
# START
##################################################################
###################################################################
# color definitions for molecules
#col.met_venous <- rgb(0,108, 240, 255, maxColorValue = 255)
#col.met_whole_blood <- rgb(0, 121, 0, 255, maxColorValue = 255)
#col.met_arterial <- rgb(235, 2, 2, 255, maxColorValue = 255)
#col.met_arterial_whole <- rgb(0, 121, 0, 255, maxColorValue = 255)
#col.met_urin <- rgb(217, 163, 0, 255, maxColorValue = 255)
#col.met_kidney <- rgb(217, 163, 0, 255, maxColorValue = 255)
#col.met_liver <- "black"
#col.met_muscle <- rgb(153, 61, 235, 255, maxColorValue = 255)
#col.met_intestine <- rgb(168, 0, 0, 255, maxColorValue = 255)
col.met_venous <- "mediumblue"
col.met_whole_blood <- "firebrick"
col.met_arterial <- "coral2"
col.met_arterial_whole <- "coral4"
col.met_urin <- "goldenrod1"
col.met_kidney <- "goldenrod1"
col.met_liver <- "darkolivegreen4"
col.met_muscle <- "palevioletred4"
col.met_intestine <- "darkorange3"
col.met_ddi_1 <- "red"
###################################################################
# define molecules
metformin_plasma <- molecule("Metformin", file.name.match = "Metformin",
display.name = "Venous Blood",
id = "metformin_plasma",
add.file.matcher = "PeripheralVenousBlood\\|Metformin\\|Plasma", color = col.met_venous)
metformin_urine <- molecule("Metformin", "Metformin",
id = "metformin_fraction_urine",
add.file.matcher = "fraction excreted to urin",
ylab = "Fraction Excreted to Urine",
is.fraction = T, color = col.met_urin)
metformin_whole_blood <- molecule("Metformin", file.name.match = "\\|Metformin\\|",
display.name = "Whole Blood",
id = "metformin_whole_blood",
add.file.matcher = "PeripheralVenousBlood\\|Metformin\\|Whole",
color = col.met_whole_blood)
metformin_arterial_blood <- molecule("Metformin", file.name.match = "\\|Metformin\\|",
display.name = "Arterial Blood",
id = "metformin_arterial_blood",
add.file.matcher = "ArterialBlood\\|Plasma",
color = col.met_arterial)
metformin_arterial_whole <- molecule("Metformin", file.name.match = "\\|Metformin\\|",
display.name = "Arterial Whole Blood",
id = "metformin_arterial_whole",
add.file.matcher = "ArterialBlood\\|Metformin\\|Whole Blood",
color = col.met_arterial_whole)
metformin_kidney <- molecule("Metformin", file.name.match = "\\|Metformin\\|",
id = "metformin_kidney",
display.name = "Kidney",
ylab = "Tissue Concentration",
add.file.matcher = "kidney",
color = col.met_kidney)
metformin_liver <- molecule("Metformin", file.name.match = "\\|Metformin\\|",
id = "metformin_liver",
display.name = "Liver",
ylab = "Tissue Concentration",
add.file.matcher = "liver",
color = col.met_liver)
metformin_muscle <- molecule("Metformin", file.name.match = "\\|Metformin\\|",
id = "metformin_muscle",
display.name = "Muscle",
ylab = "Tissue Concentration",
add.file.matcher = "muscle",
color = col.met_muscle)
metformin_intestine <- molecule("Metformin", file.name.match = "\\|Metformin\\|",
id = "metformin_intestine",
display.name = "Intestine",
ylab = "Tissue Concentration",
add.file.matcher = "intestine",
color = col.met_intestine)
## DDI
metformin_plasma_control <- molecule("Metformin", file.name.match = "Metformin",
display.name = "Metformin",
id = "metformin_plasma_control",
add.file.matcher = "PeripheralVenousBlood\\|Metformin\\|Plasma",
color = col.met_venous)
metformin_plasma_drugged <- molecule("Metformin", file.name.match = "Metformin",
display.name = "Metformin",
id = "metformin_plasma_cine",
add.file.matcher = "PeripheralVenousBlood\\|Metformin\\|Plasma",
color = col.met_ddi_1,
lty = 2)
metformin_plasma_drugged_2 <- molecule("Metformin", file.name.match = "Metformin",
display.name = "Metformin",
id = "metformin_plasma_tt",
add.file.matcher = "PeripheralVenousBlood\\|Metformin\\|Plasma",
color = col.met_liver,
lty = 1)
metformin_urine_control <- molecule("Metformin", "Metformin",
id = "metformin_urin_control",
add.file.matcher = "fraction excreted to urin",
ylab = "Fraction Excreted to Urine",
is.fraction = T, color = col.met_urin)
metformin_urine_drugged <- molecule("Metformin", "Metformin",
id = "metformin_urin_cine",
add.file.matcher = "fraction excreted to urin",
ylab = "Fraction Excreted to Urine",
lty = 2,
is.fraction = T, color = col.met_ddi_1)
metformin_urine_drugged_2 <- molecule("Metformin", "Metformin",
id = "metformin_urin_tt",
add.file.matcher = "fraction excreted to urin",
ylab = "Fraction Excreted to Urine",
is.fraction = T, color = col.met_liver)
molecules <- list(metformin_plasma, metformin_urine,
metformin_whole_blood, metformin_arterial_blood,
metformin_kidney, metformin_liver, metformin_muscle,
metformin_intestine, metformin_arterial_whole,
metformin_plasma_control, metformin_plasma_drugged,
metformin_plasma_drugged_2,
metformin_urine_control, metformin_urine_drugged,
metformin_urine_drugged_2)
###################################################################
work.dir <- "C:/Users/domin/OneDrive/Dokumente/Projekte/Nina_2/eval"
pop.dir <- "sim_pop"
ddi.dir <- "ddi_pop"
dgi.dir <- "dgi_pop"
plot.dir <- "sim_plots"
master.file <- file.path(work.dir, "Master.xlsx")
md <- md_assist("Metfomin Model", groups = c("Group 1", "Group 2"))
md <- md_add_molecules(md, molecules)
###################################################################
##################################################################
# reading the observed data
obs.file <- file.path(work.dir, "Observed_data_new.xlsx")
obs.data <- c(read.obs.profiles(obs.file, obs.sheet = 1, reference.sheet = "Ref", molecules = molecules),
read.obs.profiles(obs.file, obs.sheet = 2, reference.sheet = "Ref", molecules = molecules),
read.obs.profiles(obs.file, obs.sheet = 3, reference.sheet = "Ref", molecules = molecules),
read.obs.profiles(obs.file, obs.sheet = 4, reference.sheet = "Ref", molecules = molecules),
read.obs.profiles(obs.file, obs.sheet = 5, reference.sheet = "Ref", molecules = molecules),
read.obs.profiles(obs.file, obs.sheet = 6, reference.sheet = "Ref", molecules = molecules))
if (!is.valid(obs.data, msg = "warning"))
stop("Some observed profiles are not valid profiles")
##################################################################
# PLASMA
##################################################################
# read master file
# Plasma master
master.data.plasma <- read.master.file(master.file, molecules = molecules, xls.sheet = 1)
# Read population data
pop.data.plasma <- read.pop.profiles.from.master(master.data.plasma,
molecules = molecules,
files.dir = file.path(work.dir, pop.dir),
pop.file.ext = ".csv")
md <- plot_pops(pop.data.plasma, obs.data, md, file.path(work.dir, plot.dir), "plasma_")
##################################################################
# URIN
##################################################################
# Urin master
master.data.urin <- read.master.file(master.file, molecules = molecules, xls.sheet = 2)
# Read population data
pop.data.urin <- read.pop.profiles.from.master(master.data.urin,
molecules = molecules,
files.dir = file.path(work.dir, pop.dir),
pop.file.ext = ".csv")
md <- plot_pops(pop.data.urin, obs.data, md, file.path(work.dir, plot.dir), "urin_")
##################################################################
# TISSUE
##################################################################
# tissue master
master.data.tissue <- read.master.file(master.file, molecules = molecules, xls.sheet = 3)
# Read population data
pop.data.tissue <- read.pop.profiles.from.master(master.data.tissue,
molecules = molecules,
files.dir = file.path(work.dir, pop.dir),
pop.file.ext = ".csv")
md <- plot_pops(pop.data.tissue, obs.data, md, file.path(work.dir, plot.dir), "tissue_")
##################################################################
# DDI Plasma
##################################################################
# Plasma master
master.data.ddi.plasma <- read.master.file(master.file, molecules = molecules, xls.sheet = 4)
# Read population data
pop.data.ddi.plasma <- read.pop.profiles.from.master(master.data.ddi.plasma,
molecules = molecules,
files.dir = file.path(work.dir, ddi.dir),
pop.file.ext = ".csv")
ddi_ids <- unique(master.data.ddi.plasma$data$group2)
ddi.profiles <- list()
for (id in ddi_ids) {
pops <- list()
for (data in pop.data.ddi.plasma) {
if (data$groups[[2]] == id)
pops <- append(pops, list(data))
}
if (length(pops) >= 2) {
for (i in 2:length(pops)) {
pops[[1]]$profiles <- append(pops[[1]]$profiles, pops[[i]]$profiles)
pops[[1]]$obs.ids <- append(pops[[1]]$obs.ids, pops[[i]]$obs.ids)
}
}
pops[[1]]$groups[1] <- "DDI_Plasma"
ddi.profiles <- append(ddi.profiles, list(pops[[1]]))
}
md <- plot_pops(ddi.profiles, obs.data, md, file.path(work.dir, plot.dir), "ddi_plasma_")
##################################################################
# DDI Urin
##################################################################
# Plasma urin
master.data.ddi.urin <- read.master.file(master.file, molecules = molecules, xls.sheet = 5)
# Read population data
pop.data.ddi.urin <- read.pop.profiles.from.master(master.data.ddi.urin,
molecules = molecules,
files.dir = file.path(work.dir, ddi.dir),
pop.file.ext = ".csv")
ddi_ids <- unique(master.data.ddi.urin$data$group2)
ddi.profiles <- list()
for (id in ddi_ids) {
pops <- list()
for (data in pop.data.ddi.urin) {
if (data$groups[[2]] == id)
pops <- append(pops, list(data))
}
if (length(pops) >= 2) {
for (i in 2:length(pops)) {
pops[[1]]$profiles <- append(pops[[1]]$profiles, pops[[i]]$profiles)
pops[[1]]$obs.ids <- append(pops[[1]]$obs.ids, pops[[i]]$obs.ids)
}
}
pops[[1]]$groups[1] <- "DDI_Urin"
ddi.profiles <- append(ddi.profiles, list(pops[[1]]))
}
md <- plot_pops(ddi.profiles, obs.data, md, file.path(work.dir, plot.dir), "ddi_urin_")
##################################################################
# DGI Plasma
##################################################################
# Plasma master
master.data.dgi.plasma <- read.master.file(master.file, molecules = molecules, xls.sheet = 6)
# Read population data
pop.data.dgi.plasma <- read.pop.profiles.from.master(master.data.dgi.plasma,
molecules = molecules,
files.dir = file.path(work.dir, dgi.dir),
pop.file.ext = ".csv")
ddi_ids <- unique(master.data.dgi.plasma$data$group2)
ddi.profiles <- list()
for (id in ddi_ids) {
pops <- list()
for (data in pop.data.dgi.plasma) {
if (data$groups[[2]] == id)
pops <- append(pops, list(data))
}
if (length(pops) >= 2) {
for (i in 2:length(pops)) {
pops[[1]]$profiles <- append(pops[[1]]$profiles, pops[[i]]$profiles)
pops[[1]]$obs.ids <- append(pops[[1]]$obs.ids, pops[[i]]$obs.ids)
}
}
pops[[1]]$groups[1] <- "DGI_Plasma"
ddi.profiles <- append(ddi.profiles, list(pops[[1]]))
}
md <- plot_pops(ddi.profiles, obs.data, md, file.path(work.dir, plot.dir), "dgi_plasma_")
##################################################################
# DDI Urin
##################################################################
# Plasma urin
master.data.dgi.urin <- read.master.file(master.file, molecules = molecules, xls.sheet = 7)
# Read population data
pop.data.dgi.urin <- read.pop.profiles.from.master(master.data.dgi.urin,
molecules = molecules,
files.dir = file.path(work.dir, dgi.dir),
pop.file.ext = ".csv")
ddi_ids <- unique(master.data.dgi.urin$data$group2)
ddi.profiles <- list()
for (id in ddi_ids) {
pops <- list()
for (data in pop.data.dgi.urin) {
if (data$groups[[2]] == id)
pops <- append(pops, list(data))
}
if (length(pops) >= 2) {
for (i in 2:length(pops)) {
pops[[1]]$profiles <- append(pops[[1]]$profiles, pops[[i]]$profiles)
pops[[1]]$obs.ids <- append(pops[[1]]$obs.ids, pops[[i]]$obs.ids)
}
}
pops[[1]]$groups[1] <- "DGI_Urin"
ddi.profiles <- append(ddi.profiles, list(pops[[1]]))
}
md <- plot_pops(ddi.profiles, obs.data, md, file.path(work.dir, plot.dir), "dgi_urin_")
##################################################################
# SERIALIZE TO JSON
##################################################################
options("encoding" = "UTF-8")
json_file <- file.path(work.dir, plot.dir, "pksh_eval.json")
out = file(json_file, 'w')
write(jsonlite::serializeJSON(md, pretty = TRUE), out)
close(out)
